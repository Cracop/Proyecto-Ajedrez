{"version":3,"sources":["components/ChessBoard.jsx","components/Tile.jsx","components/Chess.jsx","components/Dificultad.jsx","Conection.js","assets/images/chess-pawn-black.png","assets/images/chess-pawn-white.png","assets/images/chess-rook-black.png","assets/images/chess-rook-white.png","assets/images/chess-knight-black.png","assets/images/chess-knight-white.png","assets/images/chess-bishop-black.png","assets/images/chess-bishop-white.png","assets/images/chess-king-black.png","assets/images/chess-king-white.png","assets/images/chess-queen-black.png","assets/images/chess-queen-white.png","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","number","className","image","style","backgroundImage","Chess","id","board","Dificultad","mode","this","type","value","onClick","Component","URL","Connection","url","axios","get","then","response","data","move","level","conection","Conection","verticalAxis","horizontalAxis","conversion","PieceType","initialBoardState","p","y","push","rookBlack","rookWhite","x","knightBlack","knightWhite","bishopBlack","bishopWhite","kingBlack","kingWhite","queenBlack","queenWhite","i","pawnBlack","pawnWhite","ChessBoard","state","pieces","gridX","gridY","originalX","originalY","offsetLeft","offsetTop","clientWidth","clientHeight","activePiece","to_x","to_y","pc","gameState","ponerTablero","j","undefined","forEach","length","componentDidMount","e","setState","document","getElementById","getStart","result","status","console","log","grabPiece","element","target","classList","contains","Math","floor","clientX","abs","ceil","clientY","position","left","top","movePiece","minX","minY","maxX","maxY","sleep","milliseconds","date","Date","now","currentDate","dropPiece","toSent","movimiento","isValid","map","forceUpdate","movePieceAlone","alert","handleClickMode","option","automatic_game","cont_moves","automatic_move","finalizarJuego","PC_move_x","PC_move_y","newPieces","location","reload","onMouseMove","onMouseDown","onMouseUp","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c317e1e1.chunk.js","sourcesContent":["import { Component } from \"react\"\r\nimport Tile from \"./Tile\"\r\nimport Chess from \"./Chess\"\r\nimport Dificultad from \"./Dificultad\"\r\nimport Conection from \"../Conection\"\r\n\r\nimport './styles/ChessBoard.css'\r\n\r\nimport pawnBlack from '../assets/images/chess-pawn-black.png'\r\nimport pawnWhite from '../assets/images/chess-pawn-white.png'\r\nimport rookBlack from '../assets/images/chess-rook-black.png' \r\nimport rookWhite from '../assets/images/chess-rook-white.png' \r\nimport knightBlack from '../assets/images/chess-knight-black.png'\r\nimport knightWhite from '../assets/images/chess-knight-white.png'\r\nimport bishopBlack from '../assets/images/chess-bishop-black.png'\r\nimport bishopWhite from '../assets/images/chess-bishop-white.png'\r\nimport kingBlack from '../assets/images/chess-king-black.png'\r\nimport kingWhite from '../assets/images/chess-king-white.png'\r\nimport queenBlack from '../assets/images/chess-queen-black.png'\r\nimport queenWhite from '../assets/images/chess-queen-white.png'\r\n\r\nconst conection = new Conection()\r\n\r\nconst verticalAxis = [1, 2, 3, 4, 5, 6, 7, 8]\r\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\r\nconst conversion = {\r\n    \"a\": 0,\r\n    \"b\": 1,\r\n    \"c\": 2,\r\n    \"d\": 3,\r\n    \"e\": 4,\r\n    \"f\": 5,\r\n    \"g\": 6,\r\n    \"h\": 7,\r\n    \"1\": 0,\r\n    \"2\": 1,\r\n    \"3\": 2,\r\n    \"4\": 3,\r\n    \"5\": 4,\r\n    \"6\": 5,\r\n    \"7\": 6,\r\n    \"8\": 7,\r\n}\r\n\r\nconst PieceType = {\r\n    PAWN: 'PAWN',\r\n    BISHOP: \"BISHOP\",\r\n    KNIGHT: 'KNIGHT',\r\n    ROOK: 'ROOK',\r\n    QUEEN: 'QUEEN',\r\n    KING: 'KING'\r\n}\r\n\r\nconst initialBoardState = []\r\nfor(let p = 0; p < 2; p++){\r\n    const type = p === 0 ? \"black\" : \"white\"\r\n    const y = p === 0 ? 7 : 0\r\n    initialBoardState.push(\r\n        // Torres\r\n        {\r\n            //image: `${process.env.PUBLIC_URL}/assets/images/chess-rook-${type}.png`,\r\n            image: (type === \"black\")?rookBlack : rookWhite,\r\n            x: 0,\r\n            y,\r\n            type: PieceType.ROOK,\r\n        },\r\n        {\r\n            image: (type === \"black\")?rookBlack : rookWhite,\r\n            x: 7,\r\n            y,\r\n            type: PieceType.ROOK,\r\n        },\r\n        // Caballos\r\n        {\r\n            image: (type === \"black\")? knightBlack : knightWhite,\r\n            x: 1,\r\n            y,\r\n            type: PieceType.KNIGHT,\r\n        },\r\n        {\r\n            image: (type === \"black\")? knightBlack : knightWhite,\r\n            x: 6,\r\n            y,\r\n            type: PieceType.KNIGHT,\r\n        },\r\n        // Alfiles\r\n        {\r\n            image: (type === \"black\")? bishopBlack : bishopWhite,\r\n            x: 2,\r\n            y,\r\n            type: PieceType.BISHOP,\r\n        },\r\n        {\r\n            image: (type === \"black\")? bishopBlack : bishopWhite,\r\n            x: 5,\r\n            y,\r\n            type: PieceType.BISHOP,\r\n        },\r\n        //Reyes\r\n        {\r\n            image: (type === \"black\")? kingBlack : kingWhite,\r\n            x: 4,\r\n            y,\r\n            type: PieceType.KING,\r\n        },\r\n        //Reinas\r\n        {\r\n            image: (type === \"black\")? queenBlack : queenWhite,\r\n            x: 3,\r\n            y,\r\n            type: PieceType.QUEEN,\r\n        },\r\n    )\r\n}\r\nfor(let i = 0; i < 8; i++){\r\n    initialBoardState.push({\r\n        image: pawnBlack,\r\n        x: i,\r\n        y: 6,\r\n        type: PieceType.PAWN,\r\n    })\r\n    initialBoardState.push({\r\n        image: pawnWhite,\r\n        x: i,\r\n        y: 1,\r\n        type: PieceType.PAWN,\r\n    })\r\n}\r\n\r\nclass ChessBoard extends Component{\r\n\r\n    board = []\r\n    state = {\r\n        pieces: initialBoardState,\r\n        gridX: 0,\r\n        gridY: 0,\r\n        originalX: 0,\r\n        originalY: 0,\r\n        offsetLeft: 0,\r\n        offsetTop: 0,\r\n        clientWidth: 0,\r\n        clientHeight: 0,\r\n        activePiece: null,\r\n        to_x: -1,\r\n        to_y: -1,\r\n        mode: 0,\r\n        pc: [0, 2],\r\n        gameState: 0, \r\n    }\r\n    constructor(){\r\n        super()\r\n        for(let j = verticalAxis.length - 1; j >= 0; j--){\r\n            for(let i = 0; i < horizontalAxis.length; i++){\r\n\r\n                const number = i + j + 2;\r\n                let image = undefined;\r\n                \r\n                this.state.pieces.forEach(p => {\r\n                    if(p.x === i && p.y === j){\r\n                        image = p.image\r\n                    }\r\n                });\r\n\r\n                this.board.push(\r\n                    <Tile\r\n                        number={number}\r\n                        image={image}\r\n                        key={`${j},${i}`}\r\n                    />\r\n                )\r\n\r\n            }\r\n        }\r\n        //this.ponerTablero()\r\n       \r\n    }\r\n    // Llena cada casilla del tablero\r\n    ponerTablero = () => {\r\n        this.board = []\r\n        for(let j = verticalAxis.length - 1; j >= 0; j--){\r\n            for(let i = 0; i < horizontalAxis.length; i++){\r\n\r\n                const number = i + j + 2;\r\n                let image = undefined;\r\n                \r\n                this.state.pieces.forEach(p => {\r\n                    if(p.x === i && p.y === j){\r\n                        image = p.image\r\n                    }\r\n                });\r\n\r\n                this.board.push(\r\n                    <Tile\r\n                        number={number}\r\n                        image={image}\r\n                        key={`${j},${i}`}\r\n                    />\r\n                )\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount = (e) => {\r\n        this.setState({\r\n            ...this.state,\r\n            offsetLeft: document.getElementById('chessboard').offsetLeft,\r\n            offsetTop: document.getElementById('chessboard').offsetTop,\r\n            clientWidth: document.getElementById('chessboard').clientWidth,\r\n            clientHeight: document.getElementById('chessboard').clientHeight,\r\n        })\r\n        conection.getStart().then((result) => {\r\n            this.setState({\r\n                ...this.state,\r\n                gameState: result.status,\r\n            })\r\n            console.log(result, this.state);\r\n        })\r\n    }\r\n\r\n    activePiece = null\r\n    grabPiece = (e) => {\r\n        const element = e.target\r\n        //console.log(element);\r\n        if(element.classList.contains(\"chess-piece\")){\r\n            const gridX = Math.floor((e.clientX - this.state.offsetLeft) / 60)\r\n            const gridY = Math.abs(Math.ceil((e.clientY - this.state.offsetTop - 480) / 60))\r\n            console.log(gridX, gridY);\r\n            this.setState({\r\n                ...this.state,\r\n                gridX: gridX,\r\n                gridY: gridY,\r\n                originalX: gridX,\r\n                originalY: gridY,\r\n            })\r\n            const x = e.clientX - 30\r\n            const y = e.clientY -30\r\n            element.style.position = \"absolute\"\r\n            element.style.left = `${x}px`\r\n            element.style.top = `${y}px`\r\n            this.activePiece = element\r\n        }\r\n    }\r\n\r\n    movePiece = (e) => {\r\n        if(this.activePiece){\r\n            const minX = this.state.offsetLeft - 15\r\n            const minY = this.state.offsetTop - 15\r\n            const maxX = this.state.offsetLeft + this.state.clientWidth - 45\r\n            const maxY = this.state.offsetTop + this.state.clientHeight - 45\r\n            const x = e.clientX - 30\r\n            const y = e.clientY - 30\r\n            //console.log(this.activePiece.style);\r\n            this.activePiece.style.position = \"absolute\"\r\n           \r\n\r\n            if(x < minX){\r\n                this.activePiece.style.left = `${minX}px`\r\n            } else if(x > maxX){\r\n                this.activePiece.style.left = `${maxX}px`\r\n            } else {\r\n                this.activePiece.style.left = `${x}px`\r\n            }\r\n\r\n            if(y < minY){\r\n                this.activePiece.style.top = `${minY}px`\r\n            } else if(y > maxY){\r\n                this.activePiece.style.top = `${maxY}px`\r\n            } else {\r\n                this.activePiece.style.top = `${y}px`\r\n            }\r\n            \r\n        }    \r\n    }\r\n\r\n    sleep = (milliseconds) => {\r\n        const date = Date.now();\r\n        let currentDate = null;\r\n        do {\r\n          currentDate = Date.now();\r\n        } while (currentDate - date < milliseconds);\r\n    }\r\n\r\n    dropPiece = (e) => {\r\n        var x = -1, y = -1\r\n        if(this.activePiece){\r\n            x = Math.floor((e.clientX - this.state.offsetLeft) / 60)\r\n            y = Math.abs(Math.ceil((e.clientY - this.state.offsetTop - 480) / 60))   \r\n            \r\n            var from_X = horizontalAxis[this.state.gridX]\r\n            var from_Y = verticalAxis[this.state.gridY]\r\n            var to_X = horizontalAxis[x]\r\n            var to_Y = verticalAxis[y]\r\n            var toSent = \"\" + from_X + \"\" + from_Y + \"\" + to_X + \"\" + to_Y\r\n            console.log(toSent);\r\n            conection.movimiento(toSent, this.state.mode).then((result) => {\r\n                console.log(result);\r\n                if(result.isValid){                 \r\n                    this.state.pieces.map((p) =>{\r\n                        if(p.x === this.state.gridX && p.y === this.state.gridY){\r\n                            \r\n                            p.x = x\r\n                            p.y = y\r\n                        }\r\n                        return p\r\n                    })\r\n                    this.ponerTablero()\r\n                    this.forceUpdate()\r\n\r\n\r\n                    this.sleep(1000)  \r\n                    this.movePieceAlone(result.move)\r\n                    \r\n                    //console.log(x, y);\r\n                }else {\r\n                    console.log(\"falso\");\r\n                    this.state.pieces.map((p) =>{\r\n                        if(p.x === this.state.gridX && p.y === this.state.gridY){\r\n                            \r\n\r\n                            p.x = x\r\n                            p.y = y\r\n                            console.log(p);\r\n                            console.log(this.state);\r\n                        }\r\n                        return p\r\n                    })\r\n                    this.ponerTablero()\r\n                    this.forceUpdate()\r\n                    this.state.pieces.map((p) =>{\r\n                        if(p.x === x && p.y === y){\r\n                            \r\n\r\n                            p.x = this.state.originalX\r\n                            p.y = this.state.originalY\r\n                            console.log(p);\r\n                        }\r\n                        return p\r\n                    })\r\n                    this.ponerTablero()\r\n                    this.forceUpdate()\r\n                    //console.log(this.state);\r\n                    alert(\"Moimiento Inválido\")\r\n                    \r\n                }\r\n                \r\n                this.ponerTablero()\r\n                this.forceUpdate()\r\n            })\r\n            \r\n            \r\n            this.activePiece = null\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    handleClickMode = (e) => {\r\n        //console.log(e.target.value);\r\n        const option = e.target.value\r\n        if(option !== \"PC vs PC\"){\r\n            if(option === \"Fácil\"){\r\n                this.setState({\r\n                    ...this.state,\r\n                    mode: 0,\r\n                })\r\n                //console.log(\"Fácil\");\r\n            }\r\n            else if (option === \"Medio\"){\r\n                this.setState({\r\n                    ...this.state,\r\n                    mode: 1,\r\n                })\r\n                //console.log(\"Medio\");\r\n            }\r\n            else{\r\n                this.setState({\r\n                    ...this.state,\r\n                    mode: 2,\r\n                })\r\n                //console.log(\"Difícil\");\r\n            }\r\n        } else {\r\n            this.automatic_game();\r\n        }\r\n    }\r\n    cont_moves = 0\r\n    automatic_game = () => {\r\n        \r\n        if(this.state.gameState !== \"gameOver\"){\r\n            const level = this.cont_moves % 2\r\n            console.log(level);\r\n            console.log(this.state.pc[level]);\r\n            conection.automatic_move(this.state.pc[level]).then((result) => {\r\n                console.log(result);\r\n                this.setState({\r\n                    ...this.state,\r\n                    gameState: result.status,\r\n                })\r\n                this.movePieceAlone(result.move)\r\n                this.cont_moves++;\r\n            })\r\n            this.ponerTablero()\r\n            this.forceUpdate()\r\n            // this.sleep(1000)\r\n        } else {\r\n            this.finalizarJuego()\r\n        }\r\n    }\r\n\r\n    movePieceAlone = (move) => {\r\n        const PC_move_x = conversion[move[2]]\r\n        const PC_move_y = conversion[move[3]] \r\n                    \r\n        var newPieces = []\r\n\r\n        this.state.pieces.map((p) =>{\r\n            if(p.x === PC_move_x && p.y === PC_move_y){\r\n                console.log(\"ADIOS\");\r\n                console.log(p);                           \r\n            } else {\r\n                console.log(\"HOLA\"); \r\n                //console.log(p);\r\n                newPieces.push(p)\r\n            }\r\n        })\r\n        this.setState({\r\n            ...this.state,\r\n            pieces: newPieces,\r\n        })\r\n        this.ponerTablero()\r\n        this.forceUpdate()\r\n        this.state.pieces.map((p) => {\r\n            if(p.x === conversion[move[0]] && p.y === conversion[move[1]]){\r\n                p.x = PC_move_x\r\n                p.y = PC_move_y\r\n            }\r\n            return p\r\n        })\r\n        this.ponerTablero()\r\n        this.forceUpdate()\r\n    }\r\n\r\n    finalizarJuego = () => {\r\n        alert(\"Juego terminado, la página se recargará en 5 segundos\")\r\n        this.sleep(5000)\r\n        this.location.reload()\r\n    }\r\n \r\n    render(){\r\n        \r\n        return(\r\n\r\n            <div className=\"row\">\t\r\n\t\t\t\t<div className=\"col s8\" id=\"app\">\r\n                    \r\n                    <div \r\n                        id=\"chessboard\"\r\n                        onMouseMove={e => this.movePiece(e)} \r\n                        onMouseDown={ e => this.grabPiece(e) }\r\n                        onMouseUp={e => this.dropPiece(e)}\r\n                    >\r\n                        <Chess board={this.board} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"col s4\" id=\"dificultad\">\r\n\r\n                    <Dificultad\r\n                        mode={this.state.mode} \r\n                        onClick={this.handleClickMode}\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ChessBoard;","import './styles/Tile.css'\r\n\r\nconst Tile = (props) => {\r\n\r\n    if(props.number % 2 === 0){\r\n        return(\r\n            <div className=\"tile black-tile\">\r\n                {\r\n                    props.image && \r\n                    <div \r\n                        style={{backgroundImage: `url(${props.image})`}} \r\n                        className=\"chess-piece\"\r\n                    >\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    } else {\r\n\r\n        return (\r\n            <div className=\"tile white-tile\">\r\n                {\r\n                    props.image && \r\n                    <div \r\n                        style={{backgroundImage: `url(${props.image})`}} \r\n                        className=\"chess-piece\"\r\n                    >   \r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default Tile ","import React from 'react'\r\n\r\nimport './styles/ChessBoard.css'\r\n\r\nconst Chess = (props) => {\r\n    return(\r\n        <div id=\"chessboard\">\r\n            {props.board}\r\n        </div>\r\n    )    \r\n}\r\n\r\nexport default Chess","import { Component } from \"react\"\r\n\r\nclass Dificultad extends Component{\r\n    mode = () => {\r\n        if(this.props.mode ===0){\r\n            return \"Fácil\"\r\n        } else if(this.props.mode === 1){\r\n            return \"Medio\"\r\n        } else {\r\n            return \"Difícil\"\r\n        }\r\n    }  \r\n\r\n    render(){\r\n        return(\r\n            <div >\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <h4 className=\"white-text center\">Dificultad actual: {this.mode()}</h4>\r\n                    </div>\r\n                    <div className=\"input-field col s12 center\">\r\n                        <input \r\n                            type=\"button\" \r\n                            value=\"Fácil\" \r\n                            className=\"waves-effect waves-ligh btn blue accent-3\"\r\n                            onClick={this.props.onClick}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field col s12 center\">\r\n                        <input \r\n                            type=\"button\" \r\n                            value=\"Medio\" \r\n                            className=\"waves-effect waves-ligh btn blue accent-3\"\r\n                            onClick={this.props.onClick}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field col s12 center\">\r\n                        <input \r\n                            type=\"button\" \r\n                            value=\"Difícil\"\r\n                            onClick={this.props.onClick} \r\n                            className=\"waves-effect waves-ligh btn blue accent-3\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field col s12 center\">\r\n                        <input \r\n                            type=\"button\" \r\n                            value=\"PC vs PC\" \r\n                            className=\"waves-effect waves-ligh btn red accent-3\"\r\n                            onClick={this.props.onClick}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dificultad","import axios from 'axios';\r\nconst URL = 'http://localhost:8000/chess';\r\n//const URL = 'http://iachessgame.herokuapp.com/chess';\r\n\r\nexport default class Connection{\r\n\r\n    constructor(){}\r\n\r\n\r\n    getStart() {\r\n        const url = `${URL}/`;\r\n        return axios.get(url).then(response => response.data);\r\n    }\r\n\r\n    movimiento( move, mode ) {\r\n        const url = `${URL}/${move}/${mode}`\r\n        return axios.get(url).then(response => response.data)\r\n    }\r\n\r\n    automatic_move( level ) {\r\n        const url = `${URL}/${level}`\r\n        return axios.get(url).then(response => response.data)\r\n    }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/chess-pawn-black.a90021bc.png\";","export default __webpack_public_path__ + \"static/media/chess-pawn-white.ebae9f48.png\";","export default __webpack_public_path__ + \"static/media/chess-rook-black.d6fa7518.png\";","export default __webpack_public_path__ + \"static/media/chess-rook-white.58159299.png\";","export default __webpack_public_path__ + \"static/media/chess-knight-black.f3906ab1.png\";","export default __webpack_public_path__ + \"static/media/chess-knight-white.e0fa4264.png\";","export default __webpack_public_path__ + \"static/media/chess-bishop-black.5940250f.png\";","export default __webpack_public_path__ + \"static/media/chess-bishop-white.311e0daa.png\";","export default __webpack_public_path__ + \"static/media/chess-king-black.d2a1a7e6.png\";","export default __webpack_public_path__ + \"static/media/chess-king-white.bcf06732.png\";","export default __webpack_public_path__ + \"static/media/chess-queen-black.0af97291.png\";","export default __webpack_public_path__ + \"static/media/chess-queen-white.25cde828.png\";","import ChessBoard from './components/ChessBoard'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nimport 'materialize-css/dist/css/materialize.min.css'\nimport './styles/App.css'\n\nfunction App() {\n\t\n\treturn (\n\t\n\t\t<Router>\n\t\t\t<Route path=\"/\" exact component={ChessBoard}/>\t\n\t\t</Router>\n\t\t\t\t\n\n\t);\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}